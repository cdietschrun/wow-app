{"version":3,"sources":["CharacterForm.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["CharacterForm","onSubmit","console","log","type","value","BlizzAPI","require","App","useState","characterHeader","setCharacterHeader","activeTitle","setActiveTitle","a","BnetApi","region","clientId","process","clientSecret","getAccessToken","access_token","query","character_header","fetch","href","then","response","json","titles","React","getCharacterData","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iRAIA,SAASA,IAOP,OACE,wBAAMC,SANR,WAEEC,QAAQC,IAAI,iBAKV,qCAEE,yBAAOC,KAAK,UAEd,yBAAOA,KAAK,SAASC,MAAM,YCXjC,IAAMC,EAAWC,EAAQ,IAyCVC,MAvCf,WACC,IAAD,EACgDC,mBAAS,IADzD,mBACSC,EADT,KAC0BC,EAD1B,OAEwCF,mBAAS,IAFjD,mBAESG,EAFT,KAEsBC,EAFtB,iDAQE,kCAAAC,EAAA,6DAEQC,EAAU,IAAIT,EAAS,CAACU,OAAO,KACPC,SAAUC,mCACVC,aAAcD,qCAJ9C,SAK6BH,EAAQK,iBALrC,cAKQC,EALR,gBAOiCN,EAAQO,MAAM,8DAP/C,cAOQC,EAPR,OASEZ,EAAmBY,GATrB,UAWuBC,MAAMD,EAAgB,OAAWE,KAAO,iBAAmBJ,EAAe,sCAAsCK,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAXjK,QAWQC,EAXR,OAYE3B,QAAQC,IAAI0B,EAAM,aAAN,MACZhB,EAAegB,EAAM,cAbvB,6CARF,sBAwBE,OApBAC,aAAgB,YAJlB,mCAKIC,KACC,IAmBD,uBAAKC,UAAU,OACb,0BAAQA,UAAU,cAChB,gBAAChC,EAAD,MACA,gDACuBU,EAAe,mBADtC,IAC8D,2BAD9D,iBAEiBE,EAAW,SC3BhBqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.2aedf968.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport './App.css';\r\nimport { useState } from \"react\";\r\n\r\nfunction CharacterForm()\r\n{\r\n  function handleSubmit()\r\n  {\r\n    console.log(\"submittedxc\")\r\n  }\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <label>\r\n        Name:\r\n        <input type=\"text\"/>\r\n      </label>\r\n      <input type=\"submit\" value=\"Submit\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport { CharacterForm as CharacterForm };\r\n","import * as React from \"react\";\nimport logo from './logo.svg';\nimport {CharacterForm} from \"./CharacterForm\";\nimport './App.css';\nimport { useState } from \"react\";\n\nconst BlizzAPI = require('blizzapi');\n\nfunction App()\n{\n  const [characterHeader, setCharacterHeader] = useState({} as any);\n  const [activeTitle, setActiveTitle] = useState({} as any);\n\n  React.useEffect(() => {\n    getCharacterData();\n  }, []);\n\n  async function getCharacterData()\n  {\n    const BnetApi = new BlizzAPI({region:'us',\n                                  clientId: process.env.REACT_APP_WOW_APP_CLIENT_ID, \n                                  clientSecret: process.env.REACT_APP_WOW_APP_SECRET_ID });\n    const access_token = await BnetApi.getAccessToken();\n\n    const character_header = await BnetApi.query('/profile/wow/character/zuljin/tyegath?namespace=profile-us'); \n    // { headers: { 'Battlenet-Namespace':'profile-us' } });\n    setCharacterHeader(character_header);\n\n    const titles = await fetch(character_header['titles'].href + '&access_token=' + access_token + '&locale=en_US&namespace=profile-us').then(response => response.json());\n    console.log(titles['active_title']['name']);\n    setActiveTitle(titles['active_title']);\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <CharacterForm />\n        <p>\n          Achievement points: {characterHeader['achievement_points']} <br></br>\n          Active title: {activeTitle['name']}\n        </p>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}